<?php

namespace App\Http\Controllers\Http;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

class IndexController extends Controller
{


    public function index(Request $request)
    {
        $className = $request->get('className');
        $className = strpos($className, 'Controller')? ucfirst($className) : ucfirst($className) .'Controller';

        $className = "App\\Http\\Controllers\\Test\\". $className;

        $classController = new $className;

        dd($classController->paymentSettlement(''));
    }

    public function memory(Request $request)
    {
        //1.引用
//        $a = 1;
//        echo $a . '<br/>';
//        $b =& $a;
//        echo $b. '<br/>';
//        $c =& $b;
//        echo $c. '<br/>';

//        unset($b);    //$b变量为空
//        $c = null;      //$a,$b,$c都为空
//        echo $a.'=>'.$b.'=>'.$c;

        #运算符

//        $a = 128;
//        echo $a . '<br/>';
//        $b = 1;
//        echo $b . '<br/>';
//        $a >>= $b;
//        echo $a . '<br/>';

        #字符串2的200次幂计算
//        $a = "2^1=2<br>2^2=4<br>2^3=8<br>2^4=16<br>2^5=32<br>2^6=64<br>2^7=128<br>2^8=256<br>2^9=512<br>2^10=1024<br>2^11=2048<br>2^12=4096<br>2^13=8192<br>2^14=16384<br>2^15=32768<br>2^16=65536<br>2^17=131072<br>2^18=262144<br>2^19=524288<br>2^20=1048576<br>2^21=2097152<br>2^22=4194304<br>2^23=8388608<br>2^24=16777216<br>2^25=33554432<br>2^26=67108864<br>2^27=134217728<br>2^28=268435456<br>2^29=536870912<br>2^30=1073741824<br>2^31=2147483648<br>2^32=4294967296<br>2^33=8589934592<br>2^34=17179869184<br>2^35=34359738368<br>2^36=68719476736<br>2^37=137438953472<br>2^38=274877906944<br>2^39=549755813888<br>2^40=1099511627776<br>2^41=2199023255552<br>2^42=4398046511104<br>2^43=8796093022208<br>2^44=17592186044416<br>2^45=35184372088832<br>2^46=70368744177664<br>2^47=140737488355328<br>2^48=281474976710656<br>2^49=562949953421312<br>2^50=1125899906842624<br>2^51=2251799813685248<br>2^52=4503599627370496<br>2^53=9007199254740992<br>2^54=18014398509481984<br>2^55=36028797018963968<br>2^56=72057594037927936<br>2^57=144115188075855872<br>2^58=288230376151711744<br>2^59=576460752303423488<br>2^60=1152921504606846976<br>2^61=2305843009213693952<br>2^62=4611686018427387904<br>2^63=9223372036854775808<br>2^64=18446744073709551616<br>2^65=36893488147419103232<br>2^66=73786976294838206464<br>2^67=147573952589676412928<br>2^68=295147905179352825856<br>2^69=590295810358705651712<br>2^70=1180591620717411303424<br>2^71=2361183241434822606848<br>2^72=4722366482869645213696<br>2^73=9444732965739290427392<br>2^74=18889465931478580854784<br>2^75=37778931862957161709568<br>2^76=75557863725914323419136<br>2^77=151115727451828646838272<br>2^78=302231454903657293676544<br>2^79=604462909807314587353088<br>2^80=1208925819614629174706176<br>2^81=2417851639229258349412352<br>2^82=4835703278458516698824704<br>2^83=9671406556917033397649408<br>2^84=19342813113834066795298816<br>2^85=38685626227668133590597632<br>2^86=77371252455336267181195264<br>2^87=154742504910672534362390528<br>2^88=309485009821345068724781056<br>2^89=618970019642690137449562112<br>2^90=1237940039285380274899124224<br>2^91=2475880078570760549798248448<br>2^92=4951760157141521099596496896<br>2^93=9903520314283042199192993792<br>2^94=19807040628566084398385987584<br>2^95=39614081257132168796771975168<br>2^96=79228162514264337593543950336<br>2^97=158456325028528675187087900672<br>2^98=316912650057057350374175801344<br>2^99=633825300114114700748351602688<br>2^100=1267650600228229401496703205376<br>2^101=2535301200456458802993406410752<br>2^102=5070602400912917605986812821504<br>2^103=10141204801825835211973625643008<br>2^104=20282409603651670423947251286016<br>2^105=40564819207303340847894502572032<br>2^106=81129638414606681695789005144064<br>2^107=162259276829213363391578010288128<br>2^108=324518553658426726783156020576256<br>2^109=649037107316853453566312041152512<br>2^110=1298074214633706907132624082305024<br>2^111=2596148429267413814265248164610048<br>2^112=5192296858534827628530496329220096<br>2^113=10384593717069655257060992658440192<br>2^114=20769187434139310514121985316880384<br>2^115=41538374868278621028243970633760768<br>2^116=83076749736557242056487941267521536<br>2^117=166153499473114484112975882535043072<br>2^118=332306998946228968225951765070086144<br>2^119=664613997892457936451903530140172288<br>2^120=1329227995784915872903807060280344576<br>2^121=2658455991569831745807614120560689152<br>2^122=5316911983139663491615228241121378304<br>2^123=10633823966279326983230456482242756608<br>2^124=21267647932558653966460912964485513216<br>2^125=42535295865117307932921825928971026432<br>2^126=85070591730234615865843651857942052864<br>2^127=170141183460469231731687303715884105728<br>2^128=340282366920938463463374607431768211456<br>2^129=680564733841876926926749214863536422912<br>2^130=1361129467683753853853498429727072845824<br>2^131=2722258935367507707706996859454145691648<br>2^132=5444517870735015415413993718908291383296<br>2^133=10889035741470030830827987437816582766592<br>2^134=21778071482940061661655974875633165533184<br>2^135=43556142965880123323311949751266331066368<br>2^136=87112285931760246646623899502532662132736<br>2^137=174224571863520493293247799005065324265472<br>2^138=348449143727040986586495598010130648530944<br>2^139=696898287454081973172991196020261297061888<br>2^140=1393796574908163946345982392040522594123776<br>2^141=2787593149816327892691964784081045188247552<br>2^142=5575186299632655785383929568162090376495104<br>2^143=11150372599265311570767859136324180752990208<br>2^144=22300745198530623141535718272648361505980416<br>2^145=44601490397061246283071436545296723011960832<br>2^146=89202980794122492566142873090593446023921664<br>2^147=178405961588244985132285746181186892047843328<br>2^148=356811923176489970264571492362373784095686656<br>2^149=713623846352979940529142984724747568191373312<br>2^150=1427247692705959881058285969449495136382746624<br>2^151=2854495385411919762116571938898990272765493248<br>2^152=5708990770823839524233143877797980545530986496<br>2^153=11417981541647679048466287755595961091061972992<br>2^154=22835963083295358096932575511191922182123945984<br>2^155=45671926166590716193865151022383844364247891968<br>2^156=91343852333181432387730302044767688728495783936<br>2^157=182687704666362864775460604089535377456991567872<br>2^158=365375409332725729550921208179070754913983135744<br>2^159=730750818665451459101842416358141509827966271488<br>2^160=1461501637330902918203684832716283019655932542976<br>2^161=2923003274661805836407369665432566039311865085952<br>2^162=5846006549323611672814739330865132078623730171904<br>2^163=11692013098647223345629478661730264157247460343808<br>2^164=23384026197294446691258957323460528314494920687616<br>2^165=46768052394588893382517914646921056628989841375232<br>2^166=93536104789177786765035829293842113257979682750464<br>2^167=187072209578355573530071658587684226515959365500928<br>2^168=374144419156711147060143317175368453031918731001856<br>2^169=748288838313422294120286634350736906063837462003712<br>2^170=1496577676626844588240573268701473812127674924007424<br>2^171=2993155353253689176481146537402947624255349848014848<br>2^172=5986310706507378352962293074805895248510699696029696<br>2^173=11972621413014756705924586149611790497021399392059392<br>2^174=23945242826029513411849172299223580994042798784118784<br>2^175=47890485652059026823698344598447161988085597568237568<br>2^176=95780971304118053647396689196894323976171195136475136<br>2^177=191561942608236107294793378393788647952342390272950272<br>2^178=383123885216472214589586756787577295904684780545900544<br>2^179=766247770432944429179173513575154591809369561091801088<br>2^180=1532495540865888858358347027150309183618739122183602176<br>2^181=3064991081731777716716694054300618367237478244367204352<br>2^182=6129982163463555433433388108601236734474956488734408704<br>2^183=12259964326927110866866776217202473468949912977468817408<br>2^184=24519928653854221733733552434404946937899825954937634816<br>2^185=49039857307708443467467104868809893875799651909875269632<br>2^186=98079714615416886934934209737619787751599303819750539264<br>2^187=196159429230833773869868419475239575503198607639501078528<br>2^188=392318858461667547739736838950479151006397215279002157056<br>2^189=784637716923335095479473677900958302012794430558004314112<br>2^190=1569275433846670190958947355801916604025588861116008628224<br>2^191=3138550867693340381917894711603833208051177722232017256448<br>2^192=6277101735386680763835789423207666416102355444464034512896<br>2^193=12554203470773361527671578846415332832204710888928069025792<br>2^194=25108406941546723055343157692830665664409421777856138051584<br>2^195=50216813883093446110686315385661331328818843555712276103168<br>2^196=100433627766186892221372630771322662657637687111424552206336<br>2^197=200867255532373784442745261542645325315275374222849104412672<br>2^198=401734511064747568885490523085290650630550748445698208825344<br>2^199=803469022129495137770981046170581301261101496891396417650688<br>2^200=1606938044258990275541962092341162602522202993782792835301376<br>";
//        print_r($a);

//        echo strip_tags("Hello <b><i>world!</i></b>","");
//        echo exec('whoami');
//        $this->outputhtml();

//        $aaa = \App\Http\Controllers\File\IndexController::aaa();

        $col = new \App\Http\Controllers\File\IndexController($request);
        $num = 1;
        $col->getAll('D:\webdocument\app-www\app', $num);
        dd();
    }

    public function outputhtml()
    {
        echo <<<EOT
   <html>
   <head><title>主页</title></head>
   <body>主页内容</body>
   </html>
EOT;
    }

    public function test()
    {
//        $string = 'http://www.baidu.com:8080/home/index.php?id=1';
        $string = 'http://www.baidu.com/home/index?id=1&name=zhangsan';

        $arrs = parse_url($string);

        $result = pathinfo($arrs['path']);

        echo $string. "<br />";
        var_dump($arrs);
        echo "<br />";
        var_dump($result);
    }

    public function maxNumber(Request $request)
    {
        if ( empty($request->m) || empty($request->n) ) {
            throw new \Exception("参数错误：lack of m,n");
        }

        $out = $this->countNum($request->m, $request->n);

        dd($out);
    }

    //约瑟夫环问题
    public function countNum($m, $n)
    {
        #18、一群猴子排成一圈，按1，2，…，n依次编号。然后从第1只开始数，数到第m只,把它踢出圈，从它后面再开始数，
        # 再数到第m只，在把它踢出去…，如此不停 的进行下去，直到最后只剩下一只猴子为止，那只猴子就叫做大王。
        # 要求编程模拟此过程，输入m、n, 输出最后那个大王的编号。
        $numbers = [];
        for ($i = 1; $i <= $n; $i++) {
            $numbers[$i] = $i;
        }
        $newArray = $numbers; //编号
        $num = 1;
        while( count($newArray) >1) {
            foreach($newArray as $key => $val) {
                if ($m == $num) {
                    unset($newArray[$key]);
                    $num = 1;
                } else {
                    $num ++;
                }
            }
        }

        return $newArray;

//        $newObject = new \stdClass();
//        $node = 1;
//
//        while($node <= $n) {
//            $newObject->node = $node;
//            $node ++;
//        }

        /**
         * 程序指向当前节点，若当前节点是查找节点且数不为空，删除当前节点，判断：若下一节点存在，则指向下一节点，若下一节点不存在且数不为空，则指向当前数的第一节点
         *    若不是查找节点，判断：若下一节点存在，则指向下一节点，若下一节点是尾节点且数不为空，则指向当前数的头节点
         */
//        $count = 1;
//        while($newObject != null) {
//            if (count($newObject))break;
//
//            if ($newObject->currentNode == $m ) {
//
//                $newObject->currentNode = null;
//                if ($newObject->nextNode)$newObject->nextNode;
//                else
//                    $newObject->firstNode;
//            }elseif ($newObject->nextNode){
//                $newObject->nextNode;
//                $count++;
//            }
//            else{
//                $newObject->firstNode;
//                $count++;
//            }
//        }
//        return $newObject;
//        $times = 1;         //计数器
//        $count = 1;         //总计
//        $tempArray = [];    //临时数组
//        while (count($newArray) > 1 && $times <= 10) {
//            if ($times == $m) {
//                unset($newArray[$m]);
////                array_merge(array_slice($newArray), );
//            }
//        }

//        return $newArray;
    }

//    public function newCreate($n)
//    {
//        $origin = [];
//        for ($i = 1; $i <= $n; $i++) {
//            array_push($origin, $i);
//        }
//        return $origin;
//    }

}



//outputhtml();


