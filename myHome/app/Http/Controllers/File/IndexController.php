<?php

namespace App\Http\Controllers\File;


use App\Http\Controllers\Controller;
use Carbon\Carbon;
use Illuminate\Http\Request;

class IndexController extends Controller
{
    public $ip = '';

    public function __construct(Request $request)
    {
        //初始化类的方法
        $this->ip = $request->getClientIp();
    }

    public function __destruct()
    {
        // TODO: Implement __destruct() method.
    }

    public function __get($name)
    {
        // TODO: Implement __get() method.
    }

    public function __set($name, $value)
    {
        // TODO: Implement __set() method.
    }

    public function __isset($name)
    {
        // TODO: Implement __isset() method.
    }

    public function __clone()
    {
        // TODO: Implement __clone() method.
    }

    public function __unset($name)
    {
        // TODO: Implement __unset() method.
    }

    public function __sleep()
    {
        // TODO: Implement __sleep() method.
    }

    public function __wakeup()
    {
        // TODO: Implement __wakeup() method.
    }

    public function __toString()
    {
        // TODO: Implement __toString() method.
        return $this->ip;
    }

    public function __invoke()
    {
        // TODO: Implement __invoke() method.
    }

    public static function __set_state($an_array)
    {
        // TODO: Implement __set_state() method.
    }

    public function __debugInfo()
    {
        // TODO: Implement __debugInfo() method.
    }

    public function __autoload()
    {

    }

    //多线程修改一个文件时，如何避免
    public function index()
    {
        $fileName = 'C:\Users\jin\Desktop\test.txt';

        if (file_exists($fileName)) {
            $file = fopen($fileName, 'a');

            if (flock($file, LOCK_EX)) {
                fwrite($file, '执行时间：'. Carbon::now()->toDateTimeString() . "\r\n");
                flock($file, LOCK_UN);

                $conn = file_get_contents($fileName);
                var_dump($conn);
            }else{
                echo "Couldn't lock the file !";
            }
            fclose($file);
        }
        $this->aaa();
    }

    //在对象中调用一个不可用的方法时，__call()会被调用
    public function __call($method, $parameters)
    {
//        parent::__call($method, $parameters); // TODO: Change the autogenerated stub
        echo __METHOD__;
    }

    //在静态方式中调用一个不可使用的方法时，__callStatic()会被调用
    public static function __callStatic($name, $arguments)
    {
        // TODO: Implement __callStatic() method.
        echo __LINE__. " lines ON " . __METHOD__ . ",namespace:". __NAMESPACE__;
    }

    public function getAll( $dir ,& $count)
    {
        if ( is_dir($dir) ) {
            echo "第 ". $count. ' 次循环：共';
            $dirname = scandir($dir);
            echo count($dirname). "个<br/>";
            while(list($key, $value) = each($dirname) ) {
                if ($value == '.' || $value == '..') {
                    echo $value. "<br/>";
                    continue;
                }
                if (is_file($dir. '/'. $value) ) {
                    echo '当前文件： '.$dir. '/'. $value. "<br/>";
                }elseif( is_dir($dir. '/'. $value) ){
                    echo '当前目录： '.$dir. '/'. $value. "<br/>";
                    $this->getAll( $dir. '/'. $value , ++$count);
                }else {
                    echo $value. "<br/>";
                }
            }
        }
        else{
            echo $dir;
        }
    }
}